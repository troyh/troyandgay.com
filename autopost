#!/usr/bin/env coffee
fs=require 'fs'
fspath=require 'path'
async=require 'async'
marked=require 'marked-metadata'
gm=require 'gm'

if process.argv.length isnt 3
  console.log "Usage: autopost <directory>"
  return

pad=(n, width, z = '0') ->
  n = n + ''
  if n.length >= width
    n
  else
    new Array(width - n.length + 1).join(z) + n

makeDate=(stats) ->
  [
    stats.ctime.getFullYear()
    pad(stats.ctime.getMonth()+1,2)
    pad(stats.ctime.getDate(),2)
  ].join "-"

createPostFromString=(metadata,text) ->
  matches=text.match /!\[(.*)\]\((.*)\)/g
  for match in matches or []
    [dummy,title,href]=match.match /!\[(.*)\]\((.*)\)/
    text=text.replace match, "![#{title}](/img/#{href})"

  # Prepend metadata to text
  s="---\n"
  for k,v of metadata
    s+="#{k}: #{v}\n"
  s+="---\n"
  text=s + text

  # Create the post file
  filename=
    "_posts/#{metadata.date}-#{metadata.title.replace(' ','-')}.markdown"

  fs.writeFileSync filename, text
  console.log "Created #{filename}"

  # Move images to the right place
  for match in (matches or [])
    [dummy,title,href]=match.match /!\[(.*)\]\((.*)\)/
    if fs.existsSync "#{process.argv[2]}/#{href}"
      console.log "Moving #{process.argv[2]}/#{href} to img/#{href}"
      if fs.existsSync "img/#{href}"
        console.log "Won't overwrite existing image: img/#{href}"
      else
        # Use GraphicsMagick to save #{process.argv[2]}/#{href} to img/#{href}
        gm("#{process.argv[2]}/#{href}")
          .autoOrient()
          .write "img/#{href}", (err) ->
            if err
              console.log "Unable to write image file: img/#{href}"
            else
              fs.unlinkSync "#{process.argv[2]}/#{href}"
              console.log "New photo: #{href}"
    else
      console.log "#{process.argv[2]}/#{href} doesn't exist"

createPostFromFile=(metadata,originalfile) ->
  contents=fs.readFileSync originalfile
  if not contents
    console.log "Failed to read #{originalfile}"
  else
    console.log "New post: #{fspath.basename(originalfile)}"
    createPostFromString metadata, contents.toString()
    console.log ""

handler_tiers=[
  [
    (path,stats) -> # Handle markdown files (and images they reference)
      ext=fspath.extname(path)
      if ext not in [".md",".markdown"]
        return false

      md=new marked path
      md.defineTokens('<!--','-->')
      origininal_metadata={}
      try
        original_metadata=md.metadata()
      catch error
        # Do nothing, it's okay to not have metadata

      # Lowercase all metadata keywords
      metadata={}
      for k,v of original_metadata
        keyword=k.toLowerCase()
        metadata[keyword]=switch keyword
          when "date"
            [y,m,d]=v.trim().split('-')
            [
              y
              pad(m,2)
              pad(d,2)
            ].join "-"
          else
            v

      metadata.title?=fspath.basename(path,ext)
      metadata.date?=makeDate(stats)

      # Make sure date string is YYYY-MM-DD

      createPostFromFile metadata, path
      # fs.unlinkSync path

      return true
  ]
  [
    (path,stats) -> # Handle images that are left over
      # Make a simple post out of each image
      ext=fspath.extname(path)
      switch ext.toLowerCase()
        when ".jpg", ".jpeg", ".png"
          console.log "#{path} is a photo"
          metadata=
            layout: "post"
            title: fspath.basename(path,ext)
            date: makeDate(stats)
          metadata_text=[]
          for k,v of metadata
            metadata_text.push "#{k}: #{v}"
          text="""
          ---
          #{metadata_text.join("\n")}
          ---
          ![](#{fspath.basename(path)})
          """
          # createPostFromString metadata, text
          return true
        else
          return false
  ]
]

for tier in handler_tiers
  # Ignore hidden files
  for file in fs.readdirSync process.argv[2] when file[0] isnt "."
    stats=fs.statSync "#{process.argv[2]}/#{file}"
    for handler in tier
      if handler "#{process.argv[2]}/#{file}",stats
        break
console.log "Done."
